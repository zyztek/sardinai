# Configuración de Producción para SARDIN-AI
# Archivo Docker Compose para entorno de producción

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgis/postgis:14-3.2
    container_name: sardin-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sardin_ai
      POSTGRES_USER: sardin_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - sardin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sardin_user -d sardin_ai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: sardin-ai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sardin-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicación Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: sardin-ai-frontend:latest
    container_name: sardin-ai-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL}
      NEXT_PUBLIC_WS_URL: ${WS_URL}
      NEXT_PUBLIC_MAPBOX_TOKEN: ${MAPBOX_TOKEN}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - sardin-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicación Backend (Node.js)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: sardin-ai-backend:latest
    container_name: sardin-ai-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://sardin_user:${POSTGRES_PASSWORD}@postgres:5432/sardin_ai
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      NOAA_API_KEY: ${NOAA_API_KEY}
      CICESE_API_KEY: ${CICESE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ZAI_API_KEY: ${ZAI_API_KEY}
      NODE_ENV: production
      PORT: 5001
    ports:
      - "5001:5001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - sardin-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Servidor WebSocket para tiempo real
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    image: sardin-ai-websocket:latest
    container_name: sardin-ai-websocket
    restart: unless-stopped
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      PORT: 5002
    ports:
      - "5002:5002"
    networks:
      - sardin-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Servidor de Modelos ML (Python)
  ml-server:
    build:
      context: ./ml-model
      dockerfile: Dockerfile
    image: sardin-ai-ml:latest
    container_name: sardin-ai-ml
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://sardin_user:${POSTGRES_PASSWORD}@postgres:5432/sardin_ai
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      PYTHON_ENV: production
    ports:
      - "5003:5000"
    volumes:
      - ./ml-model/models:/app/models
      - ./ml-model/data:/app/data
      - ./ml-model/logs:/app/logs
    networks:
      - sardin-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Nginx como reverse proxy y balanceador de carga
  nginx:
    image: nginx:alpine
    container_name: sardin-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - sardin-network
    depends_on:
      - frontend
      - backend
      - websocket

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:latest
    container_name: sardin-ai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sardin-network

  # Grafana para visualización de métricas
  grafana:
    image: grafana/grafana:latest
    container_name: sardin-ai-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - sardin-network
    depends_on:
      - prometheus

  # Elasticsearch para logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: sardin-ai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sardin-network

  # Logstash para procesamiento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: sardin-ai-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/app/logs
    networks:
      - sardin-network
    depends_on:
      - elasticsearch

  # Kibana para visualización de logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: sardin-ai-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - sardin-network
    depends_on:
      - elasticsearch

  # Redis Commander para gestión de Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sardin-ai-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - sardin-network
    depends_on:
      - redis

  # pgAdmin para gestión de PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sardin-ai-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - sardin-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  sardin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16